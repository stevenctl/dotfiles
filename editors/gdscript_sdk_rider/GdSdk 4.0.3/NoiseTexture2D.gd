extends Texture2D
#brief A texture filled with noise generated by a [Noise] object.
#desc Uses [FastNoiseLite] or other libraries to fill the texture data of your desired size.
#desc NoiseTexture2D can also generate normalmap textures.
#desc The class uses [Thread]s to generate the texture data internally, so [method Texture2D.get_image] may return [code]null[/code] if the generation process has not completed yet. In that case, you need to wait for the texture to be generated before accessing the image and the generated byte data:
#desc [codeblock]
#desc var texture = NoiseTexture2D.new()
#desc texture.noise = FastNoiseLite.new()
#desc await texture.changed
#desc var image = texture.get_image()
#desc var data = image.get_data()
#desc [/codeblock]
class_name NoiseTexture2D


#desc If [code]true[/code], the resulting texture contains a normal map created from the original noise interpreted as a bump map.
var as_normal_map: bool:
	get = is_normal_map, set = set_as_normal_map

#desc Strength of the bump maps used in this texture. A higher value will make the bump maps appear larger while a lower value will make them appear softer.
var bump_strength: float:
	get = get_bump_strength, set = set_bump_strength

#desc A [Gradient] which is used to map the luminance of each pixel to a color value.
var color_ramp: Gradient:
	get = get_color_ramp, set = set_color_ramp

#desc Determines whether mipmaps are generated for this texture.
#desc Enabling this results in less texture aliasing, but the noise texture generation may take longer.
#desc Requires (anisotropic) mipmap filtering to be enabled for a material to have an effect.
var generate_mipmaps: bool:
	get = is_generating_mipmaps, set = set_generate_mipmaps

#desc Height of the generated texture.
var height: int:
	get = get_height, set = set_height

#desc Determines whether the noise image is calculated in 3D space. May result in reduced contrast.
var in_3d_space: bool:
	get = is_in_3d_space, set = set_in_3d_space

#desc If [code]true[/code], inverts the noise texture. White becomes black, black becomes white.
var invert: bool:
	get = get_invert, set = set_invert

#desc The instance of the [Noise] object.
var noise: Noise:
	get = get_noise, set = set_noise

#desc If [code]true[/code], the noise image coming from the noise generator is normalized to the range [code]0.0[/code] to [code]1.0[/code].
#desc Turning normalization off can affect the contrast and allows you to generate non repeating tileable noise textures.
var normalize: bool:
	get = is_normalized, set = set_normalize

var resource_local_to_scene: bool:
	get = is_local_to_scene, set = set_local_to_scene

#desc If [code]true[/code], a seamless texture is requested from the [Noise] resource.
#desc [b]Note:[/b] Seamless noise textures may take longer to generate and/or can have a lower contrast compared to non-seamless noise depending on the used [Noise] resource. This is because some implementations use higher dimensions for generating seamless noise.
var seamless: bool:
	get = get_seamless, set = set_seamless

#desc Used for the default/fallback implementation of the seamless texture generation. It determines the distance over which the seams are blended. High values may result in less details and contrast. See [Noise] for further details.
var seamless_blend_skirt: float:
	get = get_seamless_blend_skirt, set = set_seamless_blend_skirt

#desc Width of the generated texture.
var width: int:
	get = get_width, set = set_width




func is_normal_map() -> bool:
	return as_normal_map

func set_as_normal_map(value: bool) -> void:
	as_normal_map = value

func get_bump_strength() -> float:
	return bump_strength

func set_bump_strength(value: float) -> void:
	bump_strength = value

func get_color_ramp() -> Gradient:
	return color_ramp

func set_color_ramp(value: Gradient) -> void:
	color_ramp = value

func is_generating_mipmaps() -> bool:
	return generate_mipmaps

func set_generate_mipmaps(value: bool) -> void:
	generate_mipmaps = value

func get_height() -> int:
	return height

func set_height(value: int) -> void:
	height = value

func is_in_3d_space() -> bool:
	return in_3d_space

func set_in_3d_space(value: bool) -> void:
	in_3d_space = value

func get_invert() -> bool:
	return invert

func set_invert(value: bool) -> void:
	invert = value

func get_noise() -> Noise:
	return noise

func set_noise(value: Noise) -> void:
	noise = value

func is_normalized() -> bool:
	return normalize

func set_normalize(value: bool) -> void:
	normalize = value

func is_local_to_scene() -> bool:
	return resource_local_to_scene

func set_local_to_scene(value: bool) -> void:
	resource_local_to_scene = value

func get_seamless() -> bool:
	return seamless

func set_seamless(value: bool) -> void:
	seamless = value

func get_seamless_blend_skirt() -> float:
	return seamless_blend_skirt

func set_seamless_blend_skirt(value: float) -> void:
	seamless_blend_skirt = value

func get_width() -> int:
	return width

func set_width(value: int) -> void:
	width = value

